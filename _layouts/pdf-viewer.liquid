---
layout: default
---

<style>
.pdf-container {
  position: relative;
  width: 100%;
  height: calc(100vh - 200px);
  min-height: 600px;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  background: #f8f9fa;
}

.pdf-header {
  background: #fff;
  border-bottom: 1px solid #ddd;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.pdf-title {
  font-size: 1.1rem;
  font-weight: 600;
  margin: 0;
  color: #333;
}

.pdf-controls {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}


.pdf-button {
  background: var(--global-theme-color);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  transition: background-color 0.2s ease;
}

.pdf-button:hover {
  background: var(--global-hover-color);
  color: white;
  text-decoration: none;
}

.pdf-button:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.pdf-viewer-container {
  width: 100%;
  height: calc(100% - 70px);
  background: white;
  overflow: auto;
  position: relative;
}

.pdf-toolbar {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  padding: 0.5rem;
  background: #f8f9fa;
  border-bottom: 1px solid #ddd;
}

.pdf-toolbar button {
  background: #fff;
  border: 1px solid #ddd;
  padding: 0.5rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
}

.pdf-toolbar button:hover {
  background: #e9ecef;
}

.pdf-toolbar button:disabled {
  background: #f8f9fa;
  color: #6c757d;
  cursor: not-allowed;
}

.pdf-canvas-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
  gap: 1rem;
}

.pdf-page {
  border: 1px solid #ddd;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  margin-bottom: 1rem;
}

.pdf-error {
  display: none;
  text-align: center;
  padding: 2rem;
  color: #666;
}

.pdf-loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(100% - 70px);
  color: #666;
  flex-direction: column;
  gap: 1rem;
}

.loading-spinner {
  width: 2rem;
  height: 2rem;
  border: 3px solid #f3f3f3;
  border-top: 3px solid var(--global-theme-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .pdf-container {
    height: calc(100vh - 150px);
    min-height: 500px;
  }
  
  .pdf-header {
    padding: 0.75rem;
    flex-direction: column;
    align-items: stretch;
  }
  
  .pdf-controls {
    justify-content: center;
  }
  
  
  .pdf-button {
    padding: 0.75rem 1rem;
  }
  
  .pdf-toolbar {
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .pdf-toolbar button {
    padding: 0.25rem 0.5rem;
    font-size: 0.8rem;
  }
}
</style>

<div class="post">
  <header class="post-header">
    <h1 class="post-title">{{ page.title }}</h1>
    
    {% if page.authors %}
      <div class="authors" style="font-size: 1.1rem; margin-bottom: 0.5rem; color: #666;">
        {% assign author_list = page.authors | split: ', ' %}
        {% for author in author_list %}
          {% if author contains 'John Schrom' %}
            <u>{{ author }}</u>{% unless forloop.last %}, {% endunless %}
          {% else %}
            {{ author }}{% unless forloop.last %}, {% endunless %}
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
    
  </header>

  <article>
    {% if page.pdf_url %}
    <div class="pdf-container">
      <div class="pdf-header">
        <h2 class="pdf-title">
          {% if page.document_type == 'Poster' %}
            Poster Presentation at <em>{{ page.venue }}</em>{% if page.year %} ({{ page.year }}){% endif %}
          {% elsif page.document_type == 'Slides' %}
            Oral Presentation at <em>{{ page.venue }}</em>{% if page.year %} ({{ page.year }}){% endif %}
          {% elsif page.document_type == 'Publication' %}
            Published in <em>{{ page.venue }}</em>{% if page.year %} ({{ page.year }}){% endif %}
          {% else %}
            {% if page.venue %}<em>{{ page.venue }}</em>{% endif %}
            {% if page.venue and page.year %}, {% endif %}
            {% if page.year %}{{ page.year }}{% endif %}
          {% endif %}
        </h2>
        <div class="pdf-controls">
          <a href="{{ page.pdf_url }}" class="pdf-button" download>
            <i class="fas fa-download"></i>
            Download PDF
          </a>
          <a href="{{ page.pdf_url }}" class="pdf-button" target="_blank">
            <i class="fas fa-external-link-alt"></i>
            Open in New Tab
          </a>
        </div>
      </div>
      
      <div class="pdf-loading" id="pdf-loading">
        <div class="loading-spinner"></div>
        <div>Loading PDF...</div>
      </div>
      
      <div class="pdf-viewer-container" id="pdf-viewer-container" style="display: none;">
        <div class="pdf-toolbar">
          <button id="prev-page" title="Previous Page">‚¨ÖÔ∏è Prev</button>
          <span id="page-info">Page 1 of 1</span>
          <button id="next-page" title="Next Page">Next ‚û°Ô∏è</button>
          <button id="zoom-out" title="Zoom Out">üîç-</button>
          <span id="zoom-info">100%</span>
          <button id="zoom-in" title="Zoom In">üîç+</button>
          <button id="fit-width" title="Fit Width">‚ÜîÔ∏è Fit Width</button>
        </div>
        <div class="pdf-canvas-container" id="pdf-canvas-container">
          <!-- PDF pages will be rendered here -->
        </div>
      </div>
      
      <div class="pdf-error" id="pdf-error">
        <h3>Unable to load PDF</h3>
        <p>Your browser may not support PDF viewing. Please try downloading the file instead.</p>
        <a href="{{ page.pdf_url }}" class="pdf-button" download>
          <i class="fas fa-download"></i>
          Download PDF instead
        </a>
      </div>
    </div>
    
    <script type="module">
      import * as pdfjsLib from '/assets/js/pdfjs-5.3.31-dist/build/pdf.mjs';
      
      // Configure PDF.js worker
      pdfjsLib.GlobalWorkerOptions.workerSrc = '/assets/js/pdfjs-5.3.31-dist/build/pdf.worker.mjs';
      
      document.addEventListener('DOMContentLoaded', async function() {
        // Get PDF info from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const pdfFromUrl = urlParams.get('pdf');
        const titleFromUrl = urlParams.get('title');
        
        // Use URL parameters or page front matter
        const pdfUrl = pdfFromUrl || '{{ page.pdf_url }}';
        const pdfTitle = titleFromUrl || '{{ page.pdf_title }}' || '{{ page.title }}';
        
        const pdfLoading = document.getElementById('pdf-loading');
        const pdfError = document.getElementById('pdf-error');
        const pdfViewerContainer = document.getElementById('pdf-viewer-container');
        const pdfCanvasContainer = document.getElementById('pdf-canvas-container');
        
        // Update page elements if we have URL parameters
        if (pdfFromUrl && titleFromUrl) {
          document.title = titleFromUrl + ' - {{ site.title }}';
          const pageTitle = document.querySelector('.post-title');
          const pdfTitleElement = document.querySelector('.pdf-title');
          if (pageTitle) pageTitle.textContent = titleFromUrl;
          if (pdfTitleElement) pdfTitleElement.textContent = titleFromUrl;
          
          // Update download links
          const downloadLinks = document.querySelectorAll('a[href="{{ page.pdf_url }}"]');
          downloadLinks.forEach(link => link.href = pdfUrl);
        }
        
        // Track PDF view with Umami if available
        if (typeof umami !== 'undefined' && pdfUrl) {
          umami.track('PDF View', { 
            pdf: pdfTitle,
            url: pdfUrl 
          });
        }
        
        if (!pdfUrl) {
          pdfLoading.style.display = 'none';
          pdfError.style.display = 'block';
          return;
        }
        
        // PDF.js viewer state
        let pdfDoc = null;
        let currentPage = 1;
        let scale = 1.0;
        let pageRendering = false;
        let pageNumPending = null;
        
        // Mobile responsiveness
        const isMobile = window.innerWidth <= 768;
        if (isMobile) {
          scale = 0.8; // Start smaller on mobile
        }
        
        // UI elements
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        const pageInfo = document.getElementById('page-info');
        const zoomOutButton = document.getElementById('zoom-out');
        const zoomInButton = document.getElementById('zoom-in');
        const zoomInfo = document.getElementById('zoom-info');
        const fitWidthButton = document.getElementById('fit-width');
        
        // Event listeners
        prevButton.addEventListener('click', onPrevPage);
        nextButton.addEventListener('click', onNextPage);
        zoomOutButton.addEventListener('click', onZoomOut);
        zoomInButton.addEventListener('click', onZoomIn);
        fitWidthButton.addEventListener('click', onFitWidth);
        
        function updateUI() {
          pageInfo.textContent = `Page ${currentPage} of ${pdfDoc.numPages}`;
          zoomInfo.textContent = `${Math.round(scale * 100)}%`;
          prevButton.disabled = currentPage <= 1;
          nextButton.disabled = currentPage >= pdfDoc.numPages;
        }
        
        function onPrevPage() {
          if (currentPage <= 1) return;
          currentPage--;
          queueRenderPage(currentPage);
        }
        
        function onNextPage() {
          if (currentPage >= pdfDoc.numPages) return;
          currentPage++;
          queueRenderPage(currentPage);
        }
        
        function onZoomOut() {
          scale = Math.max(0.25, scale - 0.25);
          queueRenderPage(currentPage);
        }
        
        function onZoomIn() {
          scale = Math.min(3.0, scale + 0.25);
          queueRenderPage(currentPage);
        }
        
        function onFitWidth() {
          // Calculate scale to fit page width to container
          const containerWidth = pdfCanvasContainer.clientWidth - 32; // Account for padding
          pdfDoc.getPage(currentPage).then(page => {
            const viewport = page.getViewport({ scale: 1.0 });
            scale = containerWidth / viewport.width;
            queueRenderPage(currentPage);
          });
        }
        
        function autoFitWidth() {
          // Auto-fit width on initial load
          const containerWidth = pdfCanvasContainer.clientWidth - 32; // Account for padding
          return pdfDoc.getPage(1).then(page => {
            const viewport = page.getViewport({ scale: 1.0 });
            scale = containerWidth / viewport.width;
            return scale;
          });
        }
        
        function renderPage(num) {
          pageRendering = true;
          
          pdfDoc.getPage(num).then(page => {
            const viewport = page.getViewport({ scale: scale });
            
            // Clear previous page
            pdfCanvasContainer.innerHTML = '';
            
            // Create canvas
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            canvas.className = 'pdf-page';
            
            pdfCanvasContainer.appendChild(canvas);
            
            // Render page
            const renderContext = {
              canvasContext: ctx,
              viewport: viewport
            };
            
            const renderTask = page.render(renderContext);
            renderTask.promise.then(() => {
              pageRendering = false;
              if (pageNumPending !== null) {
                renderPage(pageNumPending);
                pageNumPending = null;
              }
              updateUI();
            });
          });
        }
        
        function queueRenderPage(num) {
          if (pageRendering) {
            pageNumPending = num;
          } else {
            renderPage(num);
          }
        }
        
        // Load PDF
        try {
          const loadingTask = pdfjsLib.getDocument(pdfUrl);
          pdfDoc = await loadingTask.promise;
          
          // Hide loading, show viewer
          pdfLoading.style.display = 'none';
          pdfViewerContainer.style.display = 'block';
          
          // Auto-fit width, then render first page
          await autoFitWidth();
          renderPage(1);
          updateUI();
          
        } catch (error) {
          console.error('Error loading PDF:', error);
          pdfLoading.style.display = 'none';
          pdfError.style.display = 'block';
        }
      });
    </script>
    
    {% else %}
    <div class="alert alert-warning">
      <strong>No PDF specified.</strong> Please add a <code>pdf_url</code> to the page front matter.
    </div>
    {% endif %}
    
    {{ content }}
  </article>
</div>